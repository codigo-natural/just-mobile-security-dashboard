import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card'
import { SeverityBadge } from './SeverityBadge'
import { EvidenceBlock } from './EvidenceBlock'
import { Button } from '@/components/custom/Button'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select'
import Link from 'next/link'
import { ArrowLeft, Copy, ExternalLink } from 'lucide-react'
import * as React from 'react'
import { Vulnerability } from '@/lib/types'

interface VulnerabilityDetailDisplayProps {
  serviceIdNum: number
  vulnerability: Vulnerability
  selectedLanguage: 'en' | 'es'
  setSelectedLanguage: (lang: 'en' | 'es') => void
  handleCopyToClipboard: () => void
}

export function VulnerabilityDetailDisplay({
  serviceIdNum,
  vulnerability,
  selectedLanguage,
  setSelectedLanguage,
  handleCopyToClipboard,
}: VulnerabilityDetailDisplayProps) {
  const currentTranslation =
    vulnerability.translations.find((t) => t.language === selectedLanguage) ||
    vulnerability.translations.find((t) => t.language === 'en') ||
    vulnerability.translations[0]

  const availableLanguages = Array.from(
    new Set(vulnerability.translations.map((t) => t.language))
  )

  return (
    <div className='space-y-6'>
      <div className='flex justify-between items-center'>
        <Button variant='outline'>
          <Link href={`/services/${serviceIdNum}`} className='flex'>
            <ArrowLeft className='mr-2 h-4 w-4' /> Back to Service
          </Link>
        </Button>
        <Button
          className='cursor-pointer'
          variant='outline'
          onClick={handleCopyToClipboard}
        >
          <Copy className='mr-2 h-4 w-4' /> Share Link
        </Button>
      </div>

      <Card>
        <CardHeader>
          <div className='flex justify-between items-start'>
            <CardTitle className='text-2xl'>{vulnerability.title}</CardTitle>
            <SeverityBadge severity={vulnerability.severity} />
          </div>
          <CardDescription>
            OWASP MASVS: {vulnerability.owaspRef.masvs} | OWASP MASWE:{' '}
            {vulnerability.owaspRef.maswe}
          </CardDescription>
        </CardHeader>
        <CardContent>
          {availableLanguages.length > 1 && (
            <div className='mb-4'>
              <label htmlFor='lang-select' className='mr-2 text-sm font-medium'>
                Language:
              </label>
              <Select
                value={selectedLanguage}
                onValueChange={(value) =>
                  setSelectedLanguage(value as 'en' | 'es')
                }
              >
                <SelectTrigger id='lang-select' className='w-[100px]'>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {availableLanguages.map((lang) => (
                    <SelectItem key={lang} value={lang} className='uppercase'>
                      {lang}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}

          {currentTranslation ? (
            <Tabs defaultValue='description' className='w-full'>
              <TabsList className='grid w-full grid-cols-3'>
                <TabsTrigger value='description'>Description</TabsTrigger>
                <TabsTrigger value='impact'>Impact</TabsTrigger>
                <TabsTrigger value='remediation'>Remediation</TabsTrigger>
              </TabsList>
              <TabsContent
                value='description'
                className='prose dark:prose-invert max-w-none mt-4 cursor-pointer'
              >
                <div
                  dangerouslySetInnerHTML={{
                    __html: currentTranslation.description,
                  }}
                />
              </TabsContent>
              <TabsContent
                value='impact'
                className='prose dark:prose-invert max-w-none mt-4'
              >
                <div
                  dangerouslySetInnerHTML={{
                    __html: currentTranslation.impact,
                  }}
                />
              </TabsContent>
              <TabsContent
                value='remediation'
                className='prose dark:prose-invert max-w-none mt-4'
              >
                <div
                  dangerouslySetInnerHTML={{
                    __html: currentTranslation.remediation,
                  }}
                />
              </TabsContent>
            </Tabs>
          ) : (
            <p>Translation not available.</p>
          )}
        </CardContent>
      </Card>

      {vulnerability.refs && vulnerability.refs.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>References</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className='list-disc space-y-1 pl-5'>
              {vulnerability.refs.map((ref, index) => (
                <li key={index}>
                  <a
                    href={ref.url}
                    target='_blank'
                    rel='noopener noreferrer'
                    className='text-blue-500 hover:underline'
                  >
                    {ref.label} <ExternalLink className='inline h-3 w-3' />
                  </a>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      )}

      {vulnerability.evidences && vulnerability.evidences.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Evidences</CardTitle>
          </CardHeader>
          <CardContent>
            {vulnerability.evidences.map((evidence, index) => (
              <EvidenceBlock
                key={evidence.id}
                evidence={evidence}
                index={index}
              />
            ))}
          </CardContent>
        </Card>
      )}
    </div>
  )
}
