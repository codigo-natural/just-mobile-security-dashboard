'use client'

import { Service } from '@/lib/types'
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts'

interface Props {
  services: Service[]
}

const SEVERITY_COLORS = {
  high: '#EF4444', // red-500
  medium: '#F59E0B', // amber-500
  low: '#3B82F6', // blue-500
  info: '#6B7280', // gray-500
}

export const VulnerabilitySeverityChart = ({ services }: Props) => {
  const severityTotals = services.reduce(
    (acc, service) => {
      if (service.summary && service.severityCount) {
        acc.high = (acc.high || 0) + (service.severityCount.high || 0)
        acc.medium = (acc.medium || 0) + (service.severityCount.medium || 0)
        acc.low = (acc.low || 0) + (service.severityCount.low || 0)
        acc.info = (acc.info || 0) + (service.severityCount.info || 0)
      }
      return acc
    },
    { high: 0, medium: 0, low: 0, info: 0 }
  )

  const data = [
    { name: 'High', count: severityTotals.high, fill: SEVERITY_COLORS.high },
    {
      name: 'Medium',
      count: severityTotals.medium,
      fill: SEVERITY_COLORS.medium,
    },
    { name: 'Low', count: severityTotals.low, fill: SEVERITY_COLORS.low },
    { name: 'Info', count: severityTotals.info, fill: SEVERITY_COLORS.info },
  ].filter((item) => item.count > 0)

  if (data.length === 0) return <p>No vulnerability data for chart</p>
  return (
    <ResponsiveContainer width='100%' height={300}>
      <BarChart data={data}>
        <CartesianGrid strokeDasharray='3 3' />
        <XAxis dataKey='name' />
        <YAxis allowDecimals={false} />
        <Tooltip />
        <Legend />
        <Bar dataKey='count' name='Vulnerabilities' />
      </BarChart>
    </ResponsiveContainer>
  )
}
