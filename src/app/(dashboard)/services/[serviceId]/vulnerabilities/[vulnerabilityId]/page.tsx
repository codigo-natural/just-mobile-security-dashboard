'use client'

import * as React from 'react'
import { useEffect, useState } from 'react'
import { toast } from 'sonner'
import { getServiceById } from '@/lib/sdk'
import { Service, Vulnerability } from '@/lib/types'
import { VulnerabilityDetailDisplay } from '@/components/vulnerabilities/VulnerabilityDetailDisplay'
import Loading from './loading'

interface Props {
  params: Promise<{
    serviceId: string
    vulnerabilityId: string
  }>
}

export default function VulnerabilityDetailPage({ params }: Props) {
  const { serviceId, vulnerabilityId } = React.use(params)
  const [service, setService] = useState<Service | null>(null)
  const [vulnerability, setVulnerability] = useState<Vulnerability | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [loading, setLoading] = useState(true)
  const [selectedLanguage, setSelectedLanguage] = useState<'en' | 'es'>('en')

  const serviceIdNum = parseInt(serviceId, 10)

  useEffect(() => {
    if (vulnerability && window.location.hash) {
      const el = document.getElementById(window.location.hash.substring(1))
      if (el) {
        el.scrollIntoView({ behavior: 'smooth' })
      }
    }
  }, [vulnerability])

  useEffect(() => {
    if (isNaN(serviceIdNum)) {
      setError('Invalid Service ID.')
      setLoading(false)
      return
    }

    const fetchVulnerability = async () => {
      try {
        setLoading(true)
        const serviceData = await getServiceById(serviceIdNum)
        setService(serviceData)
        const vuln = serviceData?.vulnerabilities?.find(
          (v) => v.vulnerabilityId === vulnerabilityId
        )
        if (vuln) {
          setVulnerability(vuln)
        } else {
          setError('Vulnerability not found in this service.')
        }
      } catch (err: unknown) {
        setError(
          err instanceof Error
            ? err.message
            : 'Failed to load vulnerability details.'
        )
      } finally {
        setLoading(false)
      }
    }
    fetchVulnerability()
  }, [serviceIdNum, vulnerabilityId])

  const handleCopyToClipboard = () => {
    navigator.clipboard
      .writeText(window.location.href)
      .then(() => {
        toast.success('Vulnerability link copied to clipboard.')
      })
      .catch((err) => {
        console.error('Failed to copy link: ', err)
        toast.error('Could not copy link to clipboard.')
      })
  }

  if (loading) return <Loading />
  if (error) return <div className='text-red-500 text-center'>{error}</div>
  if (!vulnerability || !service)
    return (
      <div className='text-center'>
        Vulnerability or Service data not found.
      </div>
    )

  return (
    <VulnerabilityDetailDisplay
      serviceIdNum={serviceIdNum}
      vulnerability={vulnerability}
      selectedLanguage={selectedLanguage}
      setSelectedLanguage={setSelectedLanguage}
      handleCopyToClipboard={handleCopyToClipboard}
    />
  )
}
